
1) NEXTJS + MUI + REACT 
    Files: https://github.com/mui/material-ui/tree/master/examples/nextjs
2) DIGITAL OCEAN 
    Deployment: https://docs.digitalocean.com/tutorials/app-nextjs-deploy/

3) GITHUB 
    Pushing a new version: 
    (edit files)
    git add . 
    git commit -m "message"
    git push 

4) Connect Rest API and Next.js (blog/learn/knowledgebase/etc...)


5) authenticating wordpress decoupled back-end (possibly using same-domain only cookie authentication with native wp cookies?)
    article: https://developers.wpengine.com/blog/headless-wordpress-authentication-native-cookies
    video: https://www.youtube.com/watch?v=eeWxvCZHxLs







===============================
CHATGPTCHATGPTCHATGPTCHATGPTCHATGPTCHATGPTCHATGPTCHATGPT
v

Q: 
I am the inventor and i want to make a dapp that allows users to upload files to ipfs and trade them for money. 
How to structure the decentralized system in such a way, that I will get a small percentage of the trading volume.
 Users will pay via card, paypal or crypto and my share could be via ether wallet or web3 domain 

A:  
To create a decentralized application (dApp) that allows users to upload files to IPFS and trade them for money,
 and receive a small percentage of the trading volume, you can follow these steps:


First, you will need to set up a front-end interface for your dApp using a framework like React or Next.js. 
This interface should allow users to select and upload a file, and specify the price they want to sell the file for.

Next, you will need to install the ipfs-http-client library and use it to upload the selected file to IPFS.
 ipfs-http-client is a JavaScript library that allows you to interact with IPFS from within a web browser.

Once the file is uploaded to IPFS, you will need to generate a unique identifier for the file and store it in a database 
or other persistent storage. You can use a library like uuid to generate a unique identifier.

Next, you will need to create a smart contract on the Ethereum blockchain that allows buyers to purchase access to the
 file by sending cryptocurrency to the contract. You can use a tool like Truffle to compile and deploy your smart contract.

The smart contract should include a function that allows buyers to purchase access to the file by sending cryptocurrency to the contract.
 This function should verify that the payment has been received, and then provide the buyer with the IPFS hash of the file and the unique identifier that you generated in step 3.

You will also need to set up a payment gateway that allows users to pay for the file using their preferred method (e.g. credit card, PayPal, cryptocurrency).
 You can use a service like Stripe or PayPal to handle payments, or you can integrate with a cryptocurrency exchange or wallet service.

Finally, you will need to set up a mechanism for collecting your share of the trading volume. 
This could be done using a smart contract on the Ethereum blockchain that automatically sends your share of the trading volume to your Ethereum wallet, or you could use

A
CHATGPTCHATGPTCHATGPTCHATGPTCHATGPTCHATGPTCHATGPTCHATGPT

BELOW IS MY ANALYSIS 
    - users are buying tokens to fuel generating media with (fiat or crypto) 
        - how it will be taxed? -> same as freemius (vat20%+my business tax on revenue after expenses to replicate,aws or other means of nvidia)
    - users can trade media between eachother -> how they will get paid? (fiat or crypto )
        - how it will be taxed? -> (users responsibility to tax profit from sales on the platform according to law that apply to them)
SECURITY 
    - RISK: someone who is buying a 3d model for x millions is sending me his money and puts trust in me that I will correctly send his money to the seller
        - i want to avoid that by using a decentralized trust service that handles the exchange. 
        IMPORTANT: My entire stake in the exchange must be only my % commision. I cannot hold other peoples money, they need to agree between eachother.
        It's a security thing I don't want to be involved in. 
        
        Minimize my task in the value exchange - from my side There are just CID, USD|ETH, sender, receiver parameters provided that the parties agreed on. 

